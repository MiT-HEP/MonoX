[Installation]

 The fit routines in this directory may use KeysShape, which is an
 original implementation of 1D Gaussian kernel estimator
 (hep-ex/0011057). It is functionally identical to RooKeysPdf, but
 uses multiple threads (configurable) to speed the PDF construction
 up. The source code is available at
  https://github.com/yiiyama/RooFit.git
 You need to check it out and build the library:
  cd RooFit
  make
 then set roofitDictDir in efake_conf.py to the directory where
 libCommonRooFit.so is.

[efake]
 
 The electron->photon fake rate measurement proceeds in three steps:

 1. ssw2.py
 2. fit (efake_fit.py)
 3. evaluate uncertianties (efake_tpsyst.py)
 3. compute (efake_compute.py)

 1. Skim
 sww2.py produces files sample_tpeg.root, sample_tpmg.root, and
 sample_mmg.root for use by efake_fit.py.

 2. Fit
 Fits with the nominal and alternative models are performed in efake_fit.py:

  efake_fit.py (data|mc) (binning)

 runs a fit for the Z yield estimates. Fits with the nominal, altsig, and altbkg
 models are run on each bin of the (binning). Results are saved into a RooDataSet
 imported into RooWorkspace "work".

 3. Uncertainty
 Then efake_tpsyst.py throws toys to evaluate statistical and systematic uncertainties.

  efake_tpsyst.py (data|mc) (binning) (bin name) (ee|eg) (nominal|altsig|altbkg) (N) (random seed)

 runs N toy fits for (ee|eg)_(bin name) with the specified random seed. If the 4th argument
 is "nominal", toy data generated from the nominal model is refit with the same model,
 and repeating the fit results in a distribution of nsignal values from which we can estimate
 the statistical uncertainty of the fit. If the 4th argument is altsi or altbkg, the toy
 data is generated from alternative models with best-fit parameters (determined in efake_fit).
 With condor-run

  binning=ptalt
  seed=1001
  for bin in $(python efake_conf.py $binning)
  do
    for conf in ee eg
    do
      for type in nominal altsig altbkg
      do
        while true
        do
          echo $bin $conf $type 200 $seed >> syst_args.txt
          seed=$(($seed+1))
          [ $(($seed%2)) -eq 0 ] && break
        done
      done
    done
  done
  ~/bin/condor-run efake_tpsyst.py -e "data $binning" -a syst_args.txt

 The output of toy generation should be combined:
  hadd tpsyst_data_(binning).root tpsyst_data_*_{nominal,altsig,altbkg}_${binning}_*.root

 4. Finalize
 efake_compute.py takes this ROOT file as an input and makes the fake rate graph.
 