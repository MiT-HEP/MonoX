[Installation]

 The fit routines in this directory may use KeysShape, which is an
 original implementation of 1D Gaussian kernel estimator
 (hep-ex/0011057). It is functionally identical to RooKeysPdf, but
 uses multiple threads (configurable) to speed the PDF construction
 up. The source code is available at
  https://github.com/yiiyama/RooFit.git
 You need to check it out and build the library:
  cd RooFit
  make
 then set roofitDictDir in efake_conf.py to the directory where
 libCommonRooFit.so is.

[efake]
 
 The electron->photon fake rate measurement proceeds in three steps:

 1. ssw2.py
 2. fit (efake_fit.py)
 3. evaluate uncertianties (efake_fit.py, efake_tpsyst.py)
 3. compute (efake_compute.py)

 sww2.py produces files sample_tpeg.root, sample_tpmg.root, and
 sample_mmg.root for use by efake_fit.py.

 efake_fit.py is invoked four times:
  efake_fit.py (data|mc) (binning)
  efake_fit.py (data|mc) (binning) altsig
  efake_fit.py (data|mc) (binning) altbkg
 runs a fit for the nominal Z yield estimates. Yields as well as
 parameter values are recorded in the TTree yields in the file.

 Then
  efake_fit.py (data|mc) (binning) (N) (ee|eg) (bin name) (random seed)
 runs N toy fits for (ee|eg)_(bin name) with the specified random seed.
 This mode should be used in a batch system varying the seeds.
  ~/bin/condor-run efake_fit.py -a toys_args.txt

 The output of toy generation should be combined:
  hadd toys_(data|mc)_(binning).root toys_(data|mc)_{ee,eg}_[binNames]_*.root

 efake_tpsyst.py computes the systematic uncertainties from fits to the
 altsig and altbkg models. Since it involves toy data generation, the
 script should be run in batch varying the seed.
  efake_tpsyst.py (binning) (bin name) (sig|bkg) (N) (random seed)
  ~/bin/condor-run efake_tpsyst.py -a syst_args.txt

 The output should be combined:
  hadd tpsyst_data_(binning).root tpsyst_data_{sig,bkg}_(binning)_[binNames].root

 efake_compute.py takes this ROOT file as an input and makes the fake
 rate graph.
 