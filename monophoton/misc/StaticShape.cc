/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "TH1D.h"

#include "StaticShape.h"

#include <algorithm>
#include <cstring>
#include <stdexcept>

ClassImp(StaticShape) 

StaticShape::StaticShape(const char *name, const char *title, RooAbsReal& _x, double* _xvals, double* _yvals, unsigned _n) :
  RooAbsPdf(name, title), 
  x_("x", "x", this, _x),
  nx_(_n),
  ny_(_n),
  xvals_(new double[nx_]),
  yvals_(new double[ny_])
{
  for(unsigned i(0); i != _n - 1; ++i){
    if(xvals_[i] >= xvals_[i + 1])
      throw std::invalid_argument("xvals not ordered");
  }
  
  std::memcpy(xvals_, _xvals, sizeof(double) * nx_);

  if(_yvals) std::memcpy(yvals_, _yvals, sizeof(double) * ny_);
  else std::fill_n(yvals_, ny_, 0.);
}

StaticShape::StaticShape(const char *name, const char *title, RooAbsReal& _x, double _xmin, double _xmax, double* _yvals, unsigned _n) :
  RooAbsPdf(name, title), 
  x_("x", "x", this, _x),
  nx_(2),
  ny_(_n),
  xvals_(new double[nx_]),
  yvals_(new double[ny_])
{
  if(_xmax <= _xmin)
    throw std::invalid_argument("xmax <= xmin");

  xvals_[0] = _xmin;
  xvals_[1] = _xmax;

  if(_yvals) std::memcpy(yvals_, _yvals, sizeof(double) * ny_);
  else std::fill_n(yvals_, ny_, 0.);
}

StaticShape::StaticShape(const StaticShape& other, const char* name) :
  RooAbsPdf(other, name), 
  x_("x", this, other.x_),
  nx_(other.nx_),
  ny_(other.ny_),
  xvals_(new double[nx_]),
  yvals_(new double[ny_])
{
  std::memcpy(xvals_, other.xvals_, sizeof(double) * nx_);
  std::memcpy(yvals_, other.yvals_, sizeof(double) * ny_);
}

StaticShape::~StaticShape()
{
  delete [] xvals_;
  delete [] yvals_;
}

Double_t StaticShape::evaluate() const 
{ 
  unsigned iLow;
  double delta;
  double lowerBound;

  if(nx_ == ny_){
    if(x_ <= xvals_[0]) return yvals_[0];
    if(x_ >= xvals_[nx_ - 1]) return yvals_[ny_ - 1];
    iLow = std::lower_bound(xvals_, xvals_ + nx_, x_) - xvals_;
    lowerBound = xvals_[iLow];
    delta = xvals_[iLow + 1] - xvals_[iLow];
  }
  else{
    if(x_ <= xvals_[0]) return yvals_[0];
    if(x_ >= xvals_[1]) return yvals_[ny_ - 1];
    delta = (xvals_[1] - xvals_[0]) / (ny_ - 1);
    iLow = unsigned((x_ - xvals_[0]) / delta);
    lowerBound = xvals_[0] + delta * iLow;
  }

  double p((x_ - lowerBound) / delta);
  return p * yvals_[iLow + 1] + (1. - p) * yvals_[iLow];
} 

RooHistPdf*
StaticShape::toHistPdf(char const* _name/* = 0*/, RooDataHist** _dataHist/* = 0*/) const
{
  TString prefix(GetName());
  prefix += "_toHistPdf";

  TH1D* hist(0);
  if(nx_ == ny_)
    hist = new TH1D(prefix + "_hist", "", nx_ - 1, xvals_);
  else
    hist = new TH1D(prefix + "_hist", "", ny_ - 1, xvals_[0], xvals_[1]);

  for(int iX(1); iX <= hist->GetNbinsX(); ++iX)
    hist->SetBinContent(iX, (yvals_[iX - 1] + yvals_[iX]) / 2.);

  RooDataHist* dataHist(new RooDataHist(prefix + "_dataHist", "", x_.arg(), hist));
  delete hist;

  TString name(_name);
  if(name.Length() == 0) name = prefix;

  if(_dataHist) *_dataHist = dataHist;

  return new RooHistPdf(name, GetTitle(), x_.arg(), *dataHist, 1);
}
